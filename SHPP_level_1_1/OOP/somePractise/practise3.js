// Результат декоратора debounce(f, ms) – це обгортка, що призупиняє виклики до f, поки не пройде ms мілісекунд бездіяльності (без викликів, “cooldown period”), а потім викликає f один раз з останніми аргументами.

// Іншими словами, debounce – це як секретар, який приймає “телефонні дзвінки”, і чекає, поки не закінчаться ms мілісекунди тиші. І лише тоді він передає останню інформацію про виклик до “боса” (викликає фактичну f).

// Наприклад, якщо ми візьмемо функцію f і замінимо її на f = debounce(f, 1000).

// Тоді, якщо загорнута функція викликається при 0 мс, 200 мс та 500 мс, а потім викликів немає, то фактична f буде викликатися лише один раз, при 1500 мс. Тобто: після закінчення періоду 1000 мс від останнього виклику.

function print (a){
    console.log(a);
}

function debounce (func, ms){
    let timeOut
    function wrapper (...args){
        clearTimeout(timeOut)
        timeOut = setTimeout (()=>func.apply(this, args), ms)
    }
    return wrapper
}

let f = debounce(print, 1000);

f("a");
setTimeout( () => f("b"), 200);
setTimeout( () => f("c"), 500);

// повернута з debounced функція чекає 1000 мс 
// після останнього виклику, а потім запускає: alert("c")